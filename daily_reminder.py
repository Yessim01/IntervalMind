#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π IntervalMind
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
"""

import os
import sys
from datetime import date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(__file__))

from src.models.user import db, User
from src.models.topic import Topic, Repetition
from src.services.notification_service import NotificationService, DailyNotificationScheduler
from src.main import app

def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    with app.app_context():
        print(f"üïê –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ {date.today()}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        notification_service = NotificationService()
        scheduler = DailyNotificationScheduler(notification_service)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.query.all()
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data = []
        today = date.today()
        
        for user in users:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
            repetitions_query = db.session.query(Repetition, Topic).join(Topic).filter(
                Repetition.scheduled_date <= today,
                Repetition.is_completed == False,
                Topic.user_id == user.id
            ).order_by(Repetition.scheduled_date).all()
            
            repetitions = []
            for repetition, topic in repetitions_query:
                rep_dict = repetition.to_dict()
                rep_dict['topic'] = topic.to_dict()
                rep_dict['is_overdue'] = repetition.scheduled_date < today
                repetitions.append(rep_dict)
            
            users_data.append({
                'user': user.to_dict(),
                'repetitions': repetitions
            })
            
            print(f"üìö {user.username}: {len(repetitions)} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        stats = scheduler.send_daily_reminders(users_data)
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['emails_sent']}")
        print(f"   ‚ùå Email –æ—à–∏–±–æ–∫: {stats['emails_failed']}")
        print(f"   üì± Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['telegram_sent']}")
        print(f"   ‚ùå Telegram –æ—à–∏–±–æ–∫: {stats['telegram_failed']}")

def show_today_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    with app.app_context():
        today = date.today()
        print(f"üìä –°–≤–æ–¥–∫–∞ –Ω–∞ {today}:")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = User.query.count()
        total_topics = Topic.query.count()
        
        # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_repetitions = db.session.query(Repetition).join(Topic).filter(
            Repetition.scheduled_date == today,
            Repetition.is_completed == False
        ).count()
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        overdue_repetitions = db.session.query(Repetition).join(Topic).filter(
            Repetition.scheduled_date < today,
            Repetition.is_completed == False
        ).count()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        users_with_repetitions = db.session.query(User.id).join(Topic).join(Repetition).filter(
            Repetition.scheduled_date <= today,
            Repetition.is_completed == False
        ).distinct().count()
        
        print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"   üìö –í—Å–µ–≥–æ —Ç–µ–º: {total_topics}")
        print(f"   üìÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today_repetitions}")
        print(f"   ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {overdue_repetitions}")
        print(f"   üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {users_with_repetitions}")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == '--summary':
            show_today_summary()
        elif sys.argv[1] == '--send':
            send_daily_reminders()
        elif sys.argv[1] == '--help':
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python daily_reminder.py --send     # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            print("  python daily_reminder.py --summary  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É")
            print("  python daily_reminder.py --help     # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    else:
        print("üß† IntervalMind - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        show_today_summary()

